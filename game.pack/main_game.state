"""
	REQ debug.space, main.space, stresstest.space, loading.state
"""


import curses
import threading

from kernel import State, V, ColorSys, Data, Config, Space


class MainGame(State):


	def __init__(self, state_manager, window, space):

		State.__init__(self, state_manager, window)

		self.space = space

	def init(self):

		self.dt_hist = []
		self.dt_hist_size = 300

		self.resume()

	def setup_space(self, saved):
		self.space = Space.load(saved["space"], self.state_manager)

	def cleanup(self):
		pass

	def handle_events(self):

		try:

			char = self.window.getkey()

		except curses.error: # no key pressed
			return

		if char == "\n":
			my, mx = self.window.getmaxyx()
			return

		if char == Config.instance.keybinding["kuit game"]:

			threading.Thread(target=self.do_order_save).start()
			return

		if char == Config.instance.keybinding["move up"]:
			self.space.get_obj("player").velocity.set(V(0, 1))
			return

		if char == Config.instance.keybinding["move down"]:
			self.space.get_obj("player").velocity.set(V(0, -1))
			return

		if char == Config.instance.keybinding["move left"]:
			self.space.get_obj("player").velocity.set(V(1, 0))
			return

		if char == Config.instance.keybinding["move right"]:
			self.space.get_obj("player").velocity.set(V(-1, 0))
			return

		if char == Config.instance.keybinding["blit up"]:
			self.space.get_obj("player").blit_com.set(V(0, 1))
			return

		if char == Config.instance.keybinding["blit down"]:
			self.space.get_obj("player").blit_com.set(V(0, -1))
			return

		if char == Config.instance.keybinding["blit left"]:
			self.space.get_obj("player").blit_com.set(V(1, 0))
			return

		if char == Config.instance.keybinding["blit right"]:
			self.space.get_obj("player").blit_com.set(V(-1, 0))
			return

	def do_order_save(self):

		loading_state = self.state_manager.push_state(self.window, Data.states["game"]["loading"],
													  "Saving game objects ...")

		loading_state.set_incr_max(len(self.space.register))

		saved_space = self.space.save(save_game_obj_callback=loading_state.do_incr)

		self.state_manager.saved = lambda self=self: [{
			"space": saved_space,
		}, self.state_manager.quit()][0]

		self.state_manager.save_at_endframe = True

	def update(self, dt):

		if self.space is None: return

		self.space.update(dt)

		self.dt_hist.append(dt)

		while len(self.dt_hist) >= self.dt_hist_size:
			del self.dt_hist[0]

	def draw(self):

		if self.space is None: return

		my, mx = self.window.getmaxyx()

		self.space.focus_on(self.space.get_obj("player").position, mx, my)

		self.window.clear()
		self.space.draw(self.window)

		a = (sum(self.dt_hist)/len(self.dt_hist))
		self.window.addstr(0, 0, str(5*(int(1/a)//5) if a != 0 else "x"))

	def pause(self):
		pass

	def resume(self):

		curses.curs_set(False)
		self.window.nodelay(True)

		self.window.clear()

		self.window.bkgd(" ", self.state_manager.color_sys.get_color(
			ColorSys.WHITE,
			ColorSys.BLACK,
		))

		self.window.attrset(self.state_manager.color_sys.get_color(
			ColorSys.WHITE,
			ColorSys.BLACK,
		))

	def endframe(self):

		self.window.refresh()


Data.exported = MainGame
