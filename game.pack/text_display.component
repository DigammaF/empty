

from kernel import Component, Data, V


class TextDisplay(Component):


	drawn = True
	updated = True


	def __init__(self, y_offset):

		super().__init__()

		self.position.set(0, y_offset)

		self.buffer = [] # (ttl, str)

	@classmethod
	def blank(cls):
		return cls(0)

	def save_custom(self):
		return {
			"position": self.position.save(),
			"buffer": self.buffer,
		}

	def load_custom(self, saved):

		self.position.set(V.load(saved["position"]))
		self.buffer = saved["buffer"]

	@property
	def text(self):

		if self.buffer:
			return self.buffer[0][1]

		else:
			return None

	def push_text(self, text, ttl=None):

		if ttl is None:
			word_count = len(text.split(" "))
			ttl = word_count + 0.1*word_count

		self.buffer.append([ttl, text])

	def update(self, dt):

		if self.buffer:

			self.buffer[0][0] -= dt

			if self.buffer[0][0] <= 0:
				del self.buffer[0]

	def draw(self, window, reference, relative_position):

		if self.text:

			my, mx = window.getmaxyx()

			if 0 <= p.y < my:

				start_x = relative_position.x - len(self.text)//2

				str_start_x = max(0, -start_x)
				str_end_x = min(len(self.text), mx - max(0, start_x))

				self.game_object.state_manager.defer(lambda x=max(0, start_x), y=p.y, t=self.text[str_start_x:str_end_x], window=window: window.addstr(y, x, t))


Data.exported = TextDisplay
