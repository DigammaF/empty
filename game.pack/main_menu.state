"""
	REQ main_game.state
"""


import curses

from kernel import State, Data, ColorSys


class MainMenu(State):


	def init(self):

		self.resume()

	def cleanup(self):
		pass

	def handle_events(self):

		try:

			char = self.window.getkey()

		except curses.error: # no key pressed
			return

		o = (ord(char) if len(char) == 1 else "x")

		print(f": ({o}) {char}")

		if char == "q":
			self.state_manager.quit()

		if char == "n":
			self.state_manager.push_state(self.window, Data.states["game"]["new_game_menu"])

		if char == "l":
			self.state_manager.push_state(self.window, Data.states["game"]["load_game_menu"])

		if char == "a":
			self.state_manager.push_state(self.window, Data.states["game"]["alert"], text="Choose something", choices=[("One", lambda :print("One")), ("Two", lambda :print("Two")), ("Three", lambda :print("Three"))])

	def update(self, dt):
		pass

	def draw(self):
		pass

	def pause(self):
		pass

	def resume(self):

		curses.curs_set(False)
		self.window.nodelay(True)

		self.window.bkgd(" ", self.state_manager.color_sys.get_color(
			ColorSys.WHITE,
			ColorSys.BLACK,
		))

		self.window.attrset(self.state_manager.color_sys.get_color(
			ColorSys.WHITE,
			ColorSys.BLACK,
		))

		self.window.clear()

		my, mx = self.window.getmaxyx()

		self.window.border()
		self.window.addstr(int(my * 0.3), int(mx * 0.3), "Empty", curses.A_BOLD)

		y, x = int(my * 0.3) + 2, int(mx * 0.32)

		self.window.addstr(y + 2, x, "New game")
		self.window.addstr(y + 2, x, "N", curses.A_BOLD | curses.A_UNDERLINE)

		self.window.addstr(y + 3, x, "Load")
		self.window.addstr(y + 3, x, "L", curses.A_BOLD | curses.A_UNDERLINE)

		self.window.addstr(y + 5, x, "Settings")
		self.window.addstr(y + 5, x, "S", curses.A_BOLD | curses.A_UNDERLINE)
		
		self.window.addstr(y + 6, x, "Packs")
		self.window.addstr(y + 6, x, "P", curses.A_BOLD | curses.A_UNDERLINE)

		self.window.addstr(y + 8, x, "Quit")
		self.window.addstr(y + 8, x, "Q", curses.A_BOLD | curses.A_UNDERLINE)

		self.window.addstr(my - 1, int(mx*0.85), "v0.1")

		self.window.refresh()

	def endframe(self):
		pass


Data.exported = MainMenu
